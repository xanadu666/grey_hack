// xDraw by xanadu
// copyright 2024

// mushroom and bug animation example using xDraw by xanadu
// copyright 2024

// function prototype for xDraw
// recieves images in dat format.  see image2dat tool to process dat files.
// layer0 is the lowest layer for backround.  each layer appears above previous layers in rendered final image.

xDraw = function(layer0, layer1, layer2, layer3, layer4, layer5, layer6)
	
	
	// this function takes data from dat file and stores in str map of corresponding y coordinate
	Process_Image = function(data, color, character)
		
		a = 0
		for item in data
			if y == a then data[a] = data[a] + color + character 
			a = a + 1
		end for
	
	end function
	
	final_image = ""
	
	// here you must have a key:value pair for each unit of vertical heigt.
	// in this example height is 8
	str = {0:"", 1:"", 2:"", 3:"", 4:"", 5:"", 6:"", 7:""}//, 8:"", 9:"", 10:"", 11:"", 12:"", 13:"", 14:"", 15:"", 16:"", 17:"", 18:"", 19:"", 20:"", 21:"", 22:"", 23:"", 24:"", 25:"", 26:"", 27:""}//, 28:"", 29:"", 30:"", 31:"", 32:"", 33:"", 34:"", 35:"", 36:"", 37:"", 38:""}
	
	// these are counters for each layer.  counts index of image data map for each layer
	i = 0 //for layer0
	j = 0 // for layer1
	k = 0 // for layer2
	m = 0 // for layer3
	n = 0 // for layer4
	o = 0 // for layer5
	p = 0 // for layer6
	
	// set screen height and width here. you must have a str map key:value pair for each unit of vertial height
	height = 8
	width = 56
	
	

	
	for y in range (0,height - 1)
		
		wait(.01) // this can be altered or removed to change frame rate
		
		

		for x in range(0,width - 1)
			
			// this block allows images that are bigger than screen width and height to be displayed.
			// allows for scrolling backrounds and such.
			while layer6[p][0][0] > width - 1 and layer6[p][0][1] == y
				p = p + 1
				if p == layer6.len then p = 0
			end while
			
			// this block checks if a character is saved in this x,y position in image map and if so processes 
			// the character and color and moves counter for image data.  if any other image data maps use this x,y coordinate
			// will skip to next index in that map.
			if layer6[p][2] != "" and layer6[p][0][0] == x and layer6[p][0][1] == y then
				Process_Image(str, layer6[p][1], layer6[p][2])
				p = p + 1
				if p == layer6.len then p = 0
				if layer5 != null and layer5[o][0][0] == x and layer5[o][0][1] == y then o = o + 1
				if layer4 != null and layer4[n][0][0] == x and layer4[n][0][1] == y then n = n + 1
				if layer3 != null and layer3[m][0][0] == x and layer3[m][0][1] == y then m = m + 1
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer5 != null and o == layer5.len then o = 0
				if layer4 != null and n == layer4.len then n = 0
				if layer3 != null and m == layer3.len then m = 0
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if

			while layer5[o][0][0] > width - 1 and layer5[o][0][1] == y
				o = o + 1
				if o == layer5.len then o = 0
			end while
			if layer5[o][2] != "" and layer5[o][0][0] == x and layer5[o][0][1] == y then
				Process_Image(str, layer5[o][1], layer5[o][2])
				o = o + 1
				if o == layer5.len then o = 0
				if layer4 != null and layer4[n][0][0] == x and layer4[n][0][1] == y then n = n + 1
				if layer3 != null and layer3[m][0][0] == x and layer3[m][0][1] == y then m = m + 1				
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1				
				if layer4 != null and n == layer4.len then n = 0
				if layer3 != null and m == layer3.len then m = 0
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if
			
			while layer4[n][0][0] > width - 1 and layer4[n][0][1] == y
				n = n + 1
				if n == layer4.len then n = 0
			end while
			if layer4[n][2] != "" and layer4[n][0][0] == x and layer4[n][0][1] == y then
				Process_Image(str, layer4[n][1], layer4[n][2])
				n = n + 1
				if n == layer4.len then n = 0
				if layer3 != null and layer3[m][0][0] == x and layer3[m][0][1] == y then m = m + 1
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer3 != null and m == layer3.len then m = 0
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if
				
			while layer3[m][0][0] > width - 1 and layer3[m][0][1] == y
				m = m + 1
				if m == layer3.len then m = 0
			end while
			if layer3[m][2] != "" and layer3[m][0][0] == x and layer3[m][0][1] == y then
				Process_Image(str, layer3[m][1], layer3[m][2])
				m = m + 1
				if m == layer3.len then m = 0	
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if

			while layer2[k][0][0] > width - 1 and layer2[k][0][1] == y
				k = k + 1
				if k == layer2.len then k = 0
			end while
			if layer2[k][2] != "" and layer2[k][0][0] == x and layer2[k][0][1] == y then
				Process_Image(str, layer2[k][1], layer2[k][2])
				k = k + 1
				if k == layer2.len then k = 0
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1		
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0				
				continue
			end if
			
			while layer1[j][0][0] > width - 1 and layer1[j][0][1] == y
				j = j + 1
				if j == layer1.len then j = 0
			end while
			if layer1[j][2] != "" and layer1[j][0][0] == x and layer1[j][0][1] == y then
				Process_Image(str, layer1[j][1], layer1[j][2])
				j = j + 1
				if j == layer1.len then j = 0
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if
			
			while layer0[i][0][0] > width - 1 and layer0[i][0][1] == y
				i = i + 1
				if i == layer0.len then i = 0
			end while
			if layer0[i][2] != "" and layer0[i][0][0] == x and layer0[i][0][1] == y then
				Process_Image(str, layer0[i][1], layer0[i][2])
				i = i + 1
				if i == layer0.len then i = 0
				continue
			end if
		
			if layer6[p][2] == "" and layer6[p][0][0] == x and layer6[p][0][1] == y then
				Process_Image(str, layer6[p][1], "*")
				p = p + 1
				if p == layer6.len then p = 0
				if layer5 != null and layer5[o][0][0] == x and layer5[o][0][1] == y then o = o + 1
				if layer4 != null and layer4[n][0][0] == x and layer4[n][0][1] == y then n = n + 1
				if layer3 != null and layer3[m][0][0] == x and layer3[m][0][1] == y then m = m + 1
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer5 != null and o == layer5.len then o = 0
				if layer4 != null and n == layer4.len then n = 0
				if layer3 != null and m == layer3.len then m = 0
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if

			if layer5[o][2] == "" and layer5[o][0][0] == x and layer5[o][0][1] == y then
				Process_Image(str, layer5[o][1], "*")
				o = o + 1
				if o == layer5.len then o = 0
				if layer4 != null and layer4[n][0][0] == x and layer4[n][0][1] == y then n = n + 1
				if layer3 != null and layer3[m][0][0] == x and layer3[m][0][1] == y then m = m + 1				
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1				
				if layer4 != null and n == layer4.len then n = 0
				if layer3 != null and m == layer3.len then m = 0
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if
			
			if layer4[n][2] == "" and layer4[n][0][0] == x and layer4[n][0][1] == y then
				Process_Image(str, layer4[n][1], "*")
				n = n + 1
				if n == layer1.len then n = 0
				if layer3 != null and layer3[m][0][0] == x and layer3[m][0][1] == y then m = m + 1
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer3 != null and m == layer3.len then m = 0
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if

			if layer3[m][2] == "" and layer3[m][0][0] == x and layer3[m][0][1] == y then
				Process_Image(str, layer3[m][1], "*")
				m = m + 1
				if m > layer3.len then m = 0
				if layer2 != null and layer2[k][0][0] == x and layer2[k][0][1] == y then k = k + 1
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer2 != null and k == layer2.len then k = 0
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if

			if layer2[k][2] == "" and layer2[k][0][0] == x and layer2[k][0][1] == y then
				Process_Image(str, layer2[k][1], "*")
				k = k + 1
				if k == layer2.len then k = 0
				if layer1 != null and layer1[j][0][0] == x and layer1[j][0][1] == y then j = j + 1
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer1 != null and j == layer1.len then j = 0
				if layer0 != null and i == layer0.len then i = 0				
				continue
			end if
			
			if layer1[j][2] == "" and layer1[j][0][0] == x and layer1[j][0][1] == y then
				Process_Image(str, layer1[j][1], "*")
				j = j + 1
				if j == layer1.len then j = 0
				if layer0 != null and layer0[i][0][0] == x and layer0[i][0][1] == y then i = i + 1
				if layer0 != null and i == layer0.len then i = 0
				continue
			end if
			
			if layer0[i][2] == "" and layer0[i][0][0] == x and layer0[i][0][1] == y then
				Process_Image(str, layer0[i][1], "*")
				i = i + 1
				if i == layer0.len then i = 0
				continue
			end if

			Process_Image(str, color.cap, " ")
		
		end for
	
	end for
		
	
	// this block takes each string saved in str map and concatenates them into 1 long string seperated by new lines
	// hence creating a complete rendered image.
	a = 0
	for item in str
		final_image = final_image + str[a] + "\n"
		a = a + 1
		if a == str.len then final_image = final_image 
	end for
	
	// returns rendered image to be displayed with a simple print command in main function
	return final_image + "\n"

end function


// everything from here down is to animate images
Get_Direction = function(dirs)
	dirs.shuffle
	return dirs[0]
end function

Check_Collisions = function(dir, data, boundary, available_directions)

	i = 0
	for loc in data
		
		
		
		for item in boundary 

			if dir == "up_right" then


				if item[0] == data[i][0][0] + 1 and item[1] == data[i][0][1] - 1 then
					available_directions.pull
					return true
				end if
			end if
		
			if dir == "up_left" then
				if item[0] == data[i][0][0] - 1 and item[1] == data[i][0][1] - 1 then
					available_directions.pull
					return true
				end if
			end if
		
			if dir == "down_right" then
				if item[0] == data[i][0][0] + 1 and item[1] == data[i][0][1] + 1 then
					available_directions.pull
					return true
				end if
			end if
		
			if dir == "down_left" then
				if item[0] == data[i][0][0] - 1 and item[1] == data[i][0][1] + 1 then
					available_directions.pull
					return true
				end if
			end if		
	
			if dir == "up" then
				if item[0] == data[i][0][0] and item[1] == data[i][0][1] - 1 then 
					available_directions.pull
					return true
				end if
			end if
		
			if dir == "down" then
				if item[0] == data[i][0][0] and item[1] == data[i][0][1] + 1 then
					available_directions.pull
					return true
				end if
			end if
		
			if dir == "left" then
				if item[0] == data[i][0][0]  - 1 and item[1] == data[i][0][1] then
					available_directions.pull
					return true
				end if
			end if
		
			if dir == "right" then
				if item[0] == data[i][0][0] + 1 and item[1] == data[i][0][1] then
					available_directions.pull
					return true
				end if
			end if
				
		end for
		
		i = i + 1
		
	end for
	
	return false

	

end function

Apply_Direction = function(dir, data)
		
	i = 0

	for item in data
		if dir == "up_right" then
			data[i][0][0] = data[i][0][0] + 1
			data[i][0][1] = data[i][0][1] - 1
		end if
		
		if dir == "up_left" then
			data[i][0][0] = data[i][0][0] - 1
			data[i][0][1] = data[i][0][1] - 1
		end if
	
		if dir == "down_right" then
			data[i][0][0] = data[i][0][0] + 1
			data[i][0][1] = data[i][0][1] + 1
		end if
	
		if dir == "down_left" then
			data[i][0][0] = data[i][0][0] - 1
			data[i][0][1] = data[i][0][1] + 1
		end if
	
		if dir == "up" then data[i][0][1] = data[i][0][1] - 1

		if dir == "down" then data[i][0][1] = data[i][0][1] + 1
	
		if dir == "left" then data[i][0][0] = data[i][0][0] - 1
	
		if dir == "right" then data[i][0][0] = data[i][0][0] + 1
	
		i = i + 1
			
		end for
		return
	end function

Animate_Object_Random_Direction = function(object, boundary) //frame_count
	
	
	

	//if not frame_count % 2 then
	available_directions = directions[0:]
		
	current_direction = Get_Direction(directions[0:])

	collision = Check_Collisions(current_direction, object, boundary, available_directions)

	while collision == true
		current_direction = Get_Direction(available_directions)
		collision = Check_Collisions(current_direction, object, boundary, available_directions)
	end while
		
	Apply_Direction(current_direction, object)
	return
end function


Animate_Object_Random_Lines = function(object, boundary, prev_dir)
	
	available_directions = directions[0:]
	current_direction = prev_dir
	if object_state == "stopped" then  current_direction = Get_Direction(directions[0:])
	
	collision = Check_Collisions(current_direction, object, boundary, available_directions)
	
	while collision == true
		current_direction = Get_Direction(available_directions)
		collision = Check_Collisions(current_direction, object, boundary, available_directions)
	end while
	Apply_Direction(current_direction, object)
	globals.bug_previous_direction = current_direction
	globals.object_state = "moving"
end function


Animate_bug = function(object)
	
	color_list = color.values
	color_list.shuffle
	
	
	if frame_count % 3 == 0 then
		object[0][2] = "-"
		object[2][2] = "-"
		object[1][1] = color_list[0]
		return
	end if
	object[0][2] = ">"
	object[2][2] = "<"
	
	return
end function



Animate_Grass = function(data)

	number_list = [1, 2, 3,]
	
	i = 0
	for item in data
		number_list.shuffle
		//print number_list
		//print data[i][2]
		if number_list[0] == 1 then
			data[i][2] = "\" 
			i = i + 1
			continue
		end if
		
		if number_list[0] == 2 then
			data[i][2] = "|"
			i = i + 1
			continue
		end if
		
		if number_list[0] == 3 then
			data[i][2] = "/"
			i = i + 1
			continue
		end if
	
	end for
	
end function

Place_Object = function(object, x, y)
	i = 0
	for item in object
		object[i][0] = [object[i][0][0]+x, object[i][0][1]+y]
	i = i + 1
	end for
end function

initialize = function()
	
	Place_Object(grass1, 33, 2)
	Place_Object(grass2, 3, 3)
	Place_Object(grass3, 43, 6)
	Place_Object(spot1, 20, 2)
	Place_Object(spot2, 14, 3)
	Place_Object(mushroom, 18, 0)
	Place_Object(bug, 45, 4)
	
end function



input = function(g_state)
	
	if g_state == "run" then
		return
	end if
	
	if g_state == "start" then
		return
	end if
	
	if g_state == "adjust_screen_size" then
		user_input(color.cyan+"adjust screen to size of box and press any key to begin: ",false,true)
		return
	end if
	
	return

end function



update = function(g_state, fcount)
	
	if g_state == "run" then
		
		
		Animate_bug(bug)
		
		Animate_Object_Random_Lines(bug, bug_boundary, bug_previous_direction)
		
		
		if frame_count % 10 == 0 then
			Animate_Grass(grass1)
			Animate_Grass(grass2)
			Animate_Grass(grass3)
		end if
		
		if frame_count % 5 == 0  then
			Animate_Object_Random_Direction(spot1, spot_boundary)
			Animate_Object_Random_Direction(spot2, spot_boundary)
		end if
		globals.rendered_image = xDraw(mushroom, spot1, spot2, grass1, grass2, grass3, bug)
		return

	end if
	
	if g_state == "start" then
		globals.rendered_image = xDraw(screenbox)
		globals.game_state = "adjust_screen_size"
		return
	end if
	
	if g_state == "adjust_screen_size" then
		globals.rendered_image = xDraw(mushroom, spot1, spot2, grass1, grass2, grass3, bug)
		globals.game_state = "run"
		return
	end if

end function



color = {}
	color.darkbrown = "<color=#654321>"
	color.gravel = "<color=#89785c>"
	color.darkgrey = "<color=#292627>"
	color.granite = "<color=#837E7C>"
	color.moon = "<color=#F6F1D5>"
	color.white = "<color=#FFFFFF>"
	color.grey = "<color=#A5A5A5>"
	color.blue = "<color=#003AFF>"
	color.cyan = "<color=#00FFE7>"
	color.purple = "<color=#D700FF>"
	color.red = "<color=#AA0000>"
	color.yellow = "<color=#FBFF00>"
	color.orange = "<color=#FF8701>"
	color.brown = "<color=#964B00>"
	color.green = "<color=#00ED03>"
	color.peach = "<color=#FFE5B4>"
	color.dandilion = "<color=#F0E130>"
	color.silver = "<color=#C0C0C0>"
	color.gold = "<color=#FFD700>"
	color.hotpink = "<color=#FF69B4>"
	color.midnightblue = "<color=#191970>"
	color.rootbeer = "<color=#724A35>"
	color.mtdew = "<color=#EAEDB9>"
	color.blood = "<color=#780606>"
	color.poop = "<color=#593001>"
	color.champagne = "<color=#F7E7CE>"
	color.alibaster = "<color=#EEEAE0>"
	color.money = "<color=#084f09>"
	color.death = "<color=#451208>"
	color.sky = "<color=#87CEEB>"
	color.tangerine = "<color=#F28500>"
	color.cap = "</color>"


// these are the images in dat format. 
// normally they would be saved in a dat file and imported into main.src using import_code
screenbox = {}
	screenbox[0] = [[0, 0], color.cap, "*"]
	screenbox[1] = [[screenbox[0][0][0]+1, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[2] = [[screenbox[0][0][0]+2, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[3] = [[screenbox[0][0][0]+3, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[4] = [[screenbox[0][0][0]+4, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[5] = [[screenbox[0][0][0]+5, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[6] = [[screenbox[0][0][0]+6, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[7] = [[screenbox[0][0][0]+7, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[8] = [[screenbox[0][0][0]+8, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[9] = [[screenbox[0][0][0]+9, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[10] = [[screenbox[0][0][0]+10, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[11] = [[screenbox[0][0][0]+11, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[12] = [[screenbox[0][0][0]+12, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[13] = [[screenbox[0][0][0]+13, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[14] = [[screenbox[0][0][0]+14, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[15] = [[screenbox[0][0][0]+15, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[16] = [[screenbox[0][0][0]+16, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[17] = [[screenbox[0][0][0]+17, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[18] = [[screenbox[0][0][0]+18, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[19] = [[screenbox[0][0][0]+19, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[20] = [[screenbox[0][0][0]+20, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[21] = [[screenbox[0][0][0]+21, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[22] = [[screenbox[0][0][0]+22, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[23] = [[screenbox[0][0][0]+23, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[24] = [[screenbox[0][0][0]+24, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[25] = [[screenbox[0][0][0]+25, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[26] = [[screenbox[0][0][0]+26, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[27] = [[screenbox[0][0][0]+27, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[28] = [[screenbox[0][0][0]+28, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[29] = [[screenbox[0][0][0]+29, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[30] = [[screenbox[0][0][0]+30, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[31] = [[screenbox[0][0][0]+31, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[32] = [[screenbox[0][0][0]+32, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[33] = [[screenbox[0][0][0]+33, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[34] = [[screenbox[0][0][0]+34, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[35] = [[screenbox[0][0][0]+35, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[36] = [[screenbox[0][0][0]+36, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[37] = [[screenbox[0][0][0]+37, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[38] = [[screenbox[0][0][0]+38, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[39] = [[screenbox[0][0][0]+39, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[40] = [[screenbox[0][0][0]+40, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[41] = [[screenbox[0][0][0]+41, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[42] = [[screenbox[0][0][0]+42, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[43] = [[screenbox[0][0][0]+43, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[44] = [[screenbox[0][0][0]+44, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[45] = [[screenbox[0][0][0]+45, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[46] = [[screenbox[0][0][0]+46, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[47] = [[screenbox[0][0][0]+47, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[48] = [[screenbox[0][0][0]+48, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[49] = [[screenbox[0][0][0]+49, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[50] = [[screenbox[0][0][0]+50, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[51] = [[screenbox[0][0][0]+51, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[52] = [[screenbox[0][0][0]+52, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[53] = [[screenbox[0][0][0]+53, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[54] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+0], color.cap, "*"]
	screenbox[55] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+1], color.cap, "*"]
	screenbox[56] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+1], color.cap, "*"]
	screenbox[57] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+2], color.cap, "*"]
	screenbox[58] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+2], color.cap, "*"]
	screenbox[59] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+3], color.cap, "*"]
	screenbox[60] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+3], color.cap, "*"]
	screenbox[61] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+4], color.cap, "*"]
	screenbox[62] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+4], color.cap, "*"]
	screenbox[63] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+5], color.cap, "*"]
	screenbox[64] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+5], color.cap, "*"]
	screenbox[65] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+6], color.cap, "*"]
	screenbox[66] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+6], color.cap, "*"]
	screenbox[67] = [[screenbox[0][0][0]+0, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[68] = [[screenbox[0][0][0]+1, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[69] = [[screenbox[0][0][0]+2, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[70] = [[screenbox[0][0][0]+3, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[71] = [[screenbox[0][0][0]+4, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[72] = [[screenbox[0][0][0]+5, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[73] = [[screenbox[0][0][0]+6, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[74] = [[screenbox[0][0][0]+7, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[75] = [[screenbox[0][0][0]+8, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[76] = [[screenbox[0][0][0]+9, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[77] = [[screenbox[0][0][0]+10, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[78] = [[screenbox[0][0][0]+11, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[79] = [[screenbox[0][0][0]+12, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[80] = [[screenbox[0][0][0]+13, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[81] = [[screenbox[0][0][0]+14, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[82] = [[screenbox[0][0][0]+15, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[83] = [[screenbox[0][0][0]+16, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[84] = [[screenbox[0][0][0]+17, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[85] = [[screenbox[0][0][0]+18, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[86] = [[screenbox[0][0][0]+19, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[87] = [[screenbox[0][0][0]+20, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[88] = [[screenbox[0][0][0]+21, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[89] = [[screenbox[0][0][0]+22, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[90] = [[screenbox[0][0][0]+23, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[91] = [[screenbox[0][0][0]+24, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[92] = [[screenbox[0][0][0]+25, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[93] = [[screenbox[0][0][0]+26, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[94] = [[screenbox[0][0][0]+27, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[95] = [[screenbox[0][0][0]+28, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[96] = [[screenbox[0][0][0]+29, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[97] = [[screenbox[0][0][0]+30, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[98] = [[screenbox[0][0][0]+31, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[99] = [[screenbox[0][0][0]+32, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[100] = [[screenbox[0][0][0]+33, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[101] = [[screenbox[0][0][0]+34, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[102] = [[screenbox[0][0][0]+35, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[103] = [[screenbox[0][0][0]+36, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[104] = [[screenbox[0][0][0]+37, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[105] = [[screenbox[0][0][0]+38, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[106] = [[screenbox[0][0][0]+39, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[107] = [[screenbox[0][0][0]+40, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[108] = [[screenbox[0][0][0]+41, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[109] = [[screenbox[0][0][0]+42, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[110] = [[screenbox[0][0][0]+43, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[111] = [[screenbox[0][0][0]+44, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[112] = [[screenbox[0][0][0]+45, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[113] = [[screenbox[0][0][0]+46, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[114] = [[screenbox[0][0][0]+47, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[115] = [[screenbox[0][0][0]+48, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[116] = [[screenbox[0][0][0]+49, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[117] = [[screenbox[0][0][0]+50, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[118] = [[screenbox[0][0][0]+51, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[119] = [[screenbox[0][0][0]+52, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[120] = [[screenbox[0][0][0]+53, screenbox[0][0][1]+7], color.cap, "*"]
	screenbox[121] = [[screenbox[0][0][0]+54, screenbox[0][0][1]+7], color.cap, "*"]

grass1 = {}
	grass1[0] = [[0, 0], color.green, "\"]
	grass1[1] = [[grass1[0][0][0]+1, grass1[0][0][1]+0], color.green, "\"]
	grass1[2] = [[grass1[0][0][0]+2, grass1[0][0][1]+0], color.green, "|"]
	grass1[3] = [[grass1[0][0][0]+3, grass1[0][0][1]+0], color.green, "/"]
	grass1[4] = [[grass1[0][0][0]+4, grass1[0][0][1]+0], color.green, "\"]
	grass1[5] = [[grass1[0][0][0]+5, grass1[0][0][1]+0], color.green, "\"]
	grass1[6] = [[grass1[0][0][0]+6, grass1[0][0][1]+0], color.green, "|"]
	grass1[7] = [[grass1[0][0][0]+7, grass1[0][0][1]+0], color.green, "/"]

grass2 = {}
	grass2[0] = [[0, 0], color.green, "\"]
	grass2[1] = [[grass2[0][0][0]+1, grass2[0][0][1]+0], color.green, "\"]
	grass2[2] = [[grass2[0][0][0]+2, grass2[0][0][1]+0], color.green, "|"]
	grass2[3] = [[grass2[0][0][0]+3, grass2[0][0][1]+0], color.green, "/"]

grass3 = {}
	grass3[0] = [[0, 0], color.green, "\"]
	grass3[1] = [[grass3[0][0][0]+1, grass3[0][0][1]+0], color.green, "\"]
	grass3[2] = [[grass3[0][0][0]+2, grass3[0][0][1]+0], color.green, "|"]
	grass3[3] = [[grass3[0][0][0]+3, grass3[0][0][1]+0], color.green, "/"]
	grass3[4] = [[grass3[0][0][0]+4, grass3[0][0][1]+0], color.green, "|"]
	grass3[5] = [[grass3[0][0][0]+5, grass3[0][0][1]+0], color.green, "\"]

spot1 = {}
	spot1[0] = [[0, 0], color.white, "%"]
	spot1[1] = [[spot1[0][0][0]+1, spot1[0][0][1]+0], color.white, "%"]
	spot1[2] = [[spot1[0][0][0]+2, spot1[0][0][1]+0], color.white, "%"]
	spot1[3] = [[spot1[0][0][0]+0, spot1[0][0][1]+1], color.white, "%"]
	spot1[4] = [[spot1[0][0][0]+1, spot1[0][0][1]+1], color.white, "%"]
	spot1[5] = [[spot1[0][0][0]+2, spot1[0][0][1]+1], color.white, "%"]
	
spot2 = {}
	spot2[0] = [[0, 0], color.white, "%"]
	spot2[1] = [[spot2[0][0][0]+1, spot2[0][0][1]+0], color.white, "%"]
	spot2[2] = [[spot2[0][0][0]+2, spot2[0][0][1]+0], color.white, "%"]
	spot2[3] = [[spot2[0][0][0]+0, spot2[0][0][1]+1], color.white, "%"]
	spot2[4] = [[spot2[0][0][0]+1, spot2[0][0][1]+1], color.white, "%"]
	spot2[5] = [[spot2[0][0][0]+2, spot2[0][0][1]+1], color.white, "%"]
	
mushroom = {}
	mushroom[0] = [[0, 0], color.red, "o"]
	mushroom[1] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+0], color.red, "o"]
	mushroom[2] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+0], color.red, "o"]
	mushroom[3] = [[mushroom[0][0][0]-1, mushroom[0][0][1]+1], color.red, "o"]
	mushroom[4] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+1], color.red, "o"]
	mushroom[5] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+1], color.red, "o"]
	mushroom[6] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+1], color.red, "o"]
	mushroom[7] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+1], color.red, "o"]
	mushroom[8] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+1], color.red, "o"]
	mushroom[9] = [[mushroom[0][0][0]-2, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[10] = [[mushroom[0][0][0]-1, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[11] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[12] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[13] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[14] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[15] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[16] = [[mushroom[0][0][0]+5, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[17] = [[mushroom[0][0][0]+6, mushroom[0][0][1]+2], color.red, "O"]
	mushroom[18] = [[mushroom[0][0][0]-4, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[19] = [[mushroom[0][0][0]-3, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[20] = [[mushroom[0][0][0]-2, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[21] = [[mushroom[0][0][0]-1, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[22] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[23] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[24] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[25] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[26] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[27] = [[mushroom[0][0][0]+5, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[28] = [[mushroom[0][0][0]+6, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[29] = [[mushroom[0][0][0]+7, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[30] = [[mushroom[0][0][0]+8, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[31] = [[mushroom[0][0][0]+9, mushroom[0][0][1]+3], color.red, "O"]
	mushroom[32] = [[mushroom[0][0][0]-5, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[33] = [[mushroom[0][0][0]-4, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[34] = [[mushroom[0][0][0]-3, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[35] = [[mushroom[0][0][0]-2, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[36] = [[mushroom[0][0][0]-1, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[37] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[38] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[39] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[40] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[41] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[42] = [[mushroom[0][0][0]+5, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[43] = [[mushroom[0][0][0]+6, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[44] = [[mushroom[0][0][0]+7, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[45] = [[mushroom[0][0][0]+8, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[46] = [[mushroom[0][0][0]+9, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[47] = [[mushroom[0][0][0]+10, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[48] = [[mushroom[0][0][0]+11, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[49] = [[mushroom[0][0][0]+12, mushroom[0][0][1]+4], color.red, "O"]
	mushroom[50] = [[mushroom[0][0][0]-7, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[51] = [[mushroom[0][0][0]-6, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[52] = [[mushroom[0][0][0]-5, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[53] = [[mushroom[0][0][0]-4, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[54] = [[mushroom[0][0][0]-3, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[55] = [[mushroom[0][0][0]-2, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[56] = [[mushroom[0][0][0]-1, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[57] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[58] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[59] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[60] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[61] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[62] = [[mushroom[0][0][0]+5, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[63] = [[mushroom[0][0][0]+6, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[64] = [[mushroom[0][0][0]+7, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[65] = [[mushroom[0][0][0]+8, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[66] = [[mushroom[0][0][0]+9, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[67] = [[mushroom[0][0][0]+10, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[68] = [[mushroom[0][0][0]+11, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[69] = [[mushroom[0][0][0]+12, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[70] = [[mushroom[0][0][0]+13, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[71] = [[mushroom[0][0][0]+14, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[72] = [[mushroom[0][0][0]+15, mushroom[0][0][1]+5], color.red, "O"]
	mushroom[73] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+6], color.white, "|"]
	mushroom[74] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+6], color.white, "#"]
	mushroom[75] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+6], color.white, "#"]
	mushroom[76] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+6], color.white, "#"]
	mushroom[77] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+6], color.white, "#"]
	mushroom[78] = [[mushroom[0][0][0]+5, mushroom[0][0][1]+6], color.white, "#"]
	mushroom[79] = [[mushroom[0][0][0]+6, mushroom[0][0][1]+6], color.white, "|"]
	mushroom[80] = [[mushroom[0][0][0]+0, mushroom[0][0][1]+7], color.white, "|"]
	mushroom[81] = [[mushroom[0][0][0]+1, mushroom[0][0][1]+7], color.white, "#"]
	mushroom[82] = [[mushroom[0][0][0]+2, mushroom[0][0][1]+7], color.white, "#"]
	mushroom[83] = [[mushroom[0][0][0]+3, mushroom[0][0][1]+7], color.white, "#"]
	mushroom[84] = [[mushroom[0][0][0]+4, mushroom[0][0][1]+7], color.white, "#"]
	mushroom[85] = [[mushroom[0][0][0]+5, mushroom[0][0][1]+7], color.white, "#"]
	mushroom[86] = [[mushroom[0][0][0]+6, mushroom[0][0][1]+7], color.white, "|"]
	
bug = {}
	bug[0] = [[0, 0], color.orange, ">"]
	bug[1] = [[bug[0][0][0]+1, bug[0][0][1]+0], color.poop, "8"]
	bug[2] = [[bug[0][0][0]+2, bug[0][0][1]+0], color.orange, "<"]



	

bug_previous_direction = null
bug_boundary = [[0,0], [1,0], [2,0], [3,0], [4,0], [5,0], [6,0], [7,0], [8,0], [9,0], [10,0], [11,0], [12,0], [13,0], [14,0], [15,0], [16,0], [17,0], [18,0], [19,0], [20,0], [21,0], [22,0], [23,0], [24,0], [25,0], [26,0], [27,0], [28,0], [29,0], [30,0], [31,0], [32,0], [33,0], [34,0], [35,0], [36,0], [37,0], [38,0], [39,0], [40,0], [41,0], [42,0], [43,0], [44,0], [45,0], [46,0], [47,0], [48,0], [49,0], [50,0], [51,0], [52,0], [53,0], [54,0], [0,1], [54,1], [0,2], [54,2], [0,3], [54,3], [0,4], [54,4], [0,5], [54,5], [0,6], [54,6], [0,7], [1,7], [2,7], [3,7], [4,7], [5,7], [6,7], [7,7], [8,7], [9,7], [10,7], [11,7], [12,7], [13,7], [14,7], [15,7], [16,7], [17,7], [18,7], [19,7], [20,7], [21,7], [22,7], [23,7], [24,7], [25,7], [26,7], [27,7], [28,7], [29,7], [30,7], [31,7], [32,7], [33,7], [34,7], [35,7], [36,7], [37,7], [38,7], [39,7], [40,7], [41,7], [42,7], [43,7], [44,7], [45,7], [46,7], [47,7], [48,7], [49,7], [50,7], [51,7], [52,7], [53,7], [54,7]]
spot_boundary = [[17, -1], [18, -1], [19, -1], [20, -1], [21, -1], [16, 0], [17, 0], [21, 0], [22, 0], [23, 0], [15, 1], [16, 1], [23, 1], [24, 1], [25, 1], [13, 2], [14, 2], [15, 2], [25, 2], [26, 2], [27, 2], [28, 2], [12, 3], [13, 3], [28, 3], [29, 3], [30, 3], [31, 3], [10, 4], [11, 4], [12, 4], [31, 4], [32, 4], [33, 4], [34, 4], [10, 5], [34, 5], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6], [16, 6], [17, 6], [18, 6], [19, 6], [20, 6], [21, 6], [22, 6], [23, 6], [24, 6], [25, 6], [26, 6], [27, 6], [28, 6], [29, 6], [30, 6], [31, 6], [32, 6], [33, 6], [34, 6]]
directions = ["up", "up_right", "up_left", "down", "down_right", "down_left", "left", "right"]
rendered_image = ""
game_state = "start"
frame_count = 0
object_state = "stopped"

// begin main function
initialize()
while true
	input(game_state)
	update(game_state)
	print rendered_image
	frame_count = frame_count + 1
	//print frame_count
end while
